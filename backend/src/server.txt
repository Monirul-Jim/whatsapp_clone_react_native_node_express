// import mongoose from "mongoose";
// import app from "./app";
// import { Server } from "http";
// import config from "./app/config/config";
// let server: Server;
// async function main() {
//   try {
//     await mongoose.connect(config.database_url as string);
//     server = app.listen(config.port, () => {
//       console.log(`Example app listening on port ${config.port}`);
//       console.log("Database Connected !! ðŸ˜ŠðŸ˜Š");
//     });
//   } catch (error) {
//     console.log(error);
//   }
// }
// main();
// process.on("unhandledRejection", () => {
//   console.log(`ðŸ˜­ðŸ˜­ unhandledRejection is detected, shutting down....`);

//   if (server) {
//     server.close(() => {
//       process.exit(1);
//     });
//   }
//   process.exit(1);
// });
// process.on("uncaughtException", () => {
//   console.log(`ðŸ˜­ðŸ˜­ uncaughtException is detected, shutting down....`);
//   process.exit(1);
// });
// ---------------------------------------------------------------------------------------------

// import mongoose from "mongoose";
// import { createServer } from "http";
// import { Server } from "socket.io";
// import app from "./app";
// import config from "./app/config/config";
// import Message from "./app/routes/socket.model";

// let httpServer = createServer(app); // Create an HTTP server
// const io = new Server(httpServer, {
//   cors: {
//     origin: ["http://localhost:5173"], // Frontend origin
//     methods: ["GET", "POST"],
//     credentials: true,
//   },
// });

// async function main() {
//   try {
//     // Connect to MongoDB
//     await mongoose.connect(config.database_url as string);

//     // Start the server
//     httpServer.listen(config.port, () => {
//       console.log(`Server is running on port ${config.port}`);
//       console.log("Database connected! ðŸ˜Š");
//     });

//     // io.on("connection", (socket) => {
//     //   console.log("New client connected:", socket.id);

//     //   // Listen for messages from clients
//     //   socket.on("message", async (data) => {
//     //     console.log("Message received:", data);

//     //     // Save message to database
//     //     const newMessage = new Message({
//     //       sender: data.sender,
//     //       recipient: data.recipient,
//     //       text: data.text,
//     //     });
//     //     await newMessage.save();

//     //     // Emit message to specific recipient
//     //     io.to(data.recipient).emit("message", data);
//     //   });

//     //   // Handle fetching previous messages
//     //   socket.on("fetchMessages", async ({ user, chatWith }) => {
//     //     const messages = await Message.find({
//     //       $or: [
//     //         { sender: user, recipient: chatWith },
//     //         { sender: chatWith, recipient: user },
//     //       ],
//     //     }).sort({ timestamp: 1 });

//     //     socket.emit("previousMessages", messages);
//     //   });

//     //   // Handle disconnection
//     //   socket.on("disconnect", () => {
//     //     console.log("Client disconnected:", socket.id);
//     //   });
//     // });

//     // const connectedUsers: Record<string, string> = {}; // Map to store userId => socketId

//     // io.on("connection", (socket) => {
//     //   console.log("New client connected:", socket.id);

//     //   // Register user on connection
//     //   socket.on("register", (userId) => {
//     //     connectedUsers[userId] = socket.id; // Map userId to socketId
//     //     console.log(`User registered: ${userId} with socket ID ${socket.id}`);
//     //   });

//     //   // Handle incoming messages
//     //   socket.on("message", async (data) => {
//     //     console.log("Message received:", data);

//     //     // Save the message to the database
//     //     const newMessage = new Message({
//     //       sender: data.sender,
//     //       recipient: data.recipient,
//     //       text: data.text,
//     //     });
//     //     await newMessage.save();

//     //     // Send the message to the recipient's socket ID
//     //     const recipientSocketId = connectedUsers[data.recipient];
//     //     if (recipientSocketId) {
//     //       io.to(recipientSocketId).emit("message", data);
//     //     }

//     //     // Optionally send confirmation back to the sender
//     //     socket.emit("message", data);
//     //   });

//     //   // Handle fetching previous messages
//     //   socket.on("fetchMessages", async ({ user, chatWith }) => {
//     //     const messages = await Message.find({
//     //       $or: [
//     //         { sender: user, recipient: chatWith },
//     //         { sender: chatWith, recipient: user },
//     //       ],
//     //     }).sort({ timestamp: 1 });

//     //     socket.emit("previousMessages", messages);
//     //   });

//     //   // Handle disconnection
//     //   socket.on("disconnect", () => {
//     //     console.log("Client disconnected:", socket.id);

//     //     // Remove the user from the connectedUsers map
//     //     for (const userId in connectedUsers) {
//     //       if (connectedUsers[userId] === socket.id) {
//     //         delete connectedUsers[userId];
//     //         break;
//     //       }
//     //     }
//     //   });
//     // });

//     const connectedUsers: Record<string, string> = {}; // Map to store userId => socketId

//     io.on("connection", (socket) => {
//       console.log("New client connected:", socket.id);

//       // Register user on connection
//       socket.on("register", (userId) => {
//         connectedUsers[userId] = socket.id; // Map userId to socketId
//         console.log(`User registered: ${userId} with socket ID ${socket.id}`);
//       });

//       // Forward "typing" event to the recipient
//       socket.on("typing", ({ senderId, recipientId }) => {
//         console.log(
//           `Typing event received from senderId: ${senderId}, to recipientId: ${recipientId}`
//         );
//         const recipientSocketId = connectedUsers[recipientId];
//         if (recipientSocketId) {
//           io.to(recipientSocketId).emit("typing", senderId); // Send typing event to recipient
//         }
//       });

//       // Forward "stoppedTyping" event to the recipient
//       socket.on("stoppedTyping", ({ senderId, recipientId }) => {
//         console.log(
//           `Stopped typing event received from senderId: ${senderId}, to recipientId: ${recipientId}`
//         );
//         const recipientSocketId = connectedUsers[recipientId];
//         if (recipientSocketId) {
//           io.to(recipientSocketId).emit("stoppedTyping", senderId); // Send stoppedTyping event to recipient
//         }
//       });

//       // Handle incoming messages
//       socket.on("message", async (data) => {
//         console.log("Message received:", data);

//         // Save the message to the database
//         const newMessage = new Message({
//           sender: data.sender,
//           recipient: data.recipient,
//           text: data.text,
//         });
//         await newMessage.save();

//         // Send the message to the recipient's socket ID
//         const recipientSocketId = connectedUsers[data.recipient];
//         if (recipientSocketId) {
//           io.to(recipientSocketId).emit("message", data);
//         }

//         // Optionally send confirmation back to the sender
//         socket.emit("message", data);
//       });

//       // Handle fetching previous messages
//       socket.on("fetchMessages", async ({ user, chatWith }) => {
//         const messages = await Message.find({
//           $or: [
//             { sender: user, recipient: chatWith },
//             { sender: chatWith, recipient: user },
//           ],
//         }).sort({ timestamp: 1 });

//         socket.emit("previousMessages", messages);
//       });

//       // Handle disconnection
//       socket.on("disconnect", () => {
//         console.log("Client disconnected:", socket.id);

//         // Remove the user from the connectedUsers map
//         for (const userId in connectedUsers) {
//           if (connectedUsers[userId] === socket.id) {
//             delete connectedUsers[userId];
//             break;
//           }
//         }
//       });
//     });
//   } catch (error) {
//     console.error("Error starting server:", error);
//   }
// }

// // Handle errors
// process.on("unhandledRejection", (reason) => {
//   console.log("Unhandled Rejection:", reason);
//   if (httpServer) {
//     httpServer.close(() => process.exit(1));
//   }
// });

// process.on("uncaughtException", (error) => {
//   console.log("Uncaught Exception:", error);
//   process.exit(1);
// });
// main();
